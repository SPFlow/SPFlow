name: Development Build & Test

on:
  release:
    types: [ published ]
  pull_request:
  push:

jobs:

  "Lint":
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: |
            **/pyproject.toml
      - name: Install library and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Lint
        run: ruff check spflow tests
        continue-on-error: true

  "Check_Format":
    name: "Check Format"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: |
            **/pyproject.toml
      - name: Install library and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Checking formatting with black
        run: black --check --diff spflow tests
        continue-on-error: true

  # We do not want to waste too many resources on testing all combinations. Thus we test:
  # - on the oldest and the two most recent version of Python that we support (see README.md)
  # - with the oldest version of the backend we support plus the two most recent major ones
  #   (to catch if only the newest version breaks something)
  # - A single test on Windows and macOS to catch if something breaks there
  # - We only test on the most recent version of macOS and Windows to save resources
  # - We test even fewer combinations for TensorFlow and Jax to save resources

  "Test_OS":
    name: "Test: Py ${{ matrix.version-python }} @ OS ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version-python: ['3.11']
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/run_tests"
        with:
          version-python: ${{ matrix.version-python }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  "Test_Torch":
    name: "Test: Py ${{ matrix.version-python }} + Torch ${{ matrix.version-pytorch }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false 
      matrix:
        version-python: ['3.9', '3.10', '3.11']  # 3.12 is not yet supported by torch
        version-pytorch: ['2.1.1', '2.2.2', '2.3.1']
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/run_tests"
        with:
          version-python: ${{ matrix.version-python }}
          version-pytorch: ${{ matrix.version-pytorch }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

